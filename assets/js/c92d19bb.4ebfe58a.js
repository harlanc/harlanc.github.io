"use strict";(self.webpackChunktauri_docs=self.webpackChunktauri_docs||[]).push([[299],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var r=n(6540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=l,y=u["".concat(c,".").concat(d)]||u[d]||g[d]||a;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>m,default:()=>w,frontMatter:()=>y,metadata:()=>f,toc:()=>b});var r=n(5680),l=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&p(e,n,t[n]);if(i)for(var n of i(t))s.call(t,n)&&p(e,n,t[n]);return e},g=(e,t)=>a(e,o(t)),d=(e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n};const y={sidebar_position:2},m="Quick Start",f={unversionedId:"docs/getting-started/setup/README",id:"docs/getting-started/setup/README",title:"Quick Start",description:"Install and Run",source:"@site/docs/docs/getting-started/setup/README.mdx",sourceDirName:"docs/getting-started/setup",slug:"/docs/getting-started/setup/",permalink:"/v0.10.0/docs/getting-started/setup/",draft:!1,editUrl:"https://github.com/harlanc/xiu-doc/edit/dev/docs/docs/getting-started/setup/README.mdx",tags:[],version:"current",lastUpdatedAt:1708384924,formattedLastUpdatedAt:"Feb 19, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Prerequisites",permalink:"/v0.10.0/docs/getting-started/prerequisites"},next:{title:"Configurations",permalink:"/v0.10.0/docs/configurations/"}},h={},b=[{value:"Install and Run",id:"install-and-run",level:2},{value:"Install with cargo",id:"install-with-cargo",level:3},{value:"Build from source",id:"build-from-source",level:3},{value:"Clone Xiu",id:"clone-xiu",level:4},{value:"Compile",id:"compile",level:4},{value:"Run",id:"run",level:3},{value:"Publish",id:"publish",level:2}],v={toc:b},O="wrapper";function w(e){var t=e,{components:n}=t,l=d(t,["components"]);return(0,r.yg)(O,g(u(u({},v),l),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",u({},{id:"quick-start"}),"Quick Start"),(0,r.yg)("h2",u({},{id:"install-and-run"}),"Install and Run"),(0,r.yg)("p",null,"There are two ways to install xiu:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Install directly with cargo"),(0,r.yg)("li",{parentName:"ul"},"Build from source")),(0,r.yg)("h3",u({},{id:"install-with-cargo"}),"Install with cargo"),(0,r.yg)("p",null,"Issue the following command to install xiu:"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"cargo install xiu\n")),(0,r.yg)("p",null,"Issue the following command to view help information:"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"xiu -h\n")),(0,r.yg)("p",null,"Print the following information:"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{}),"A secure and easy to use live media server, hope you love it!!!\n\nUsage: xiu [OPTIONS] \n\nOptions:\n   -c, --config <path>   Specify the xiu server configuration file path.\n   -r, --rtmp <port>     Specify the RTMP listening port(e.g.:1935).\n   -t, --rtsp <port>     Specify the rtsp listening port.(e.g.:554).\n   -w, --webrtc <port>   Specify the whip/whep listening port.(e.g.:8900).\n   -f, --httpflv <port>  Specify the HTTP-FLV listening port(e.g.:8080).\n   -s, --hls <port>      Specify the HLS listening port(e.g.:8081).\n   -l, --log <level>     Specify the log level. [possible values: trace, debug, info, warn, error, debug]\n   -h, --help            Print help\n   -V, --version         Print version\n")),(0,r.yg)("h3",u({},{id:"build-from-source"}),"Build from source"),(0,r.yg)("h4",u({},{id:"clone-xiu"}),"Clone Xiu"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"git clone https://github.com/harlanc/xiu.git\n")),(0,r.yg)("p",null," checkout the latest code\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"git checkout tags/<tag_name> -b <branch_name>\n")),(0,r.yg)("h4",u({},{id:"compile"}),"Compile"),(0,r.yg)("p",null,"Currently, the master branch uses locally referenced project files by default and can be compiled directly:"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"make build\n")),(0,r.yg)("p",null,"or"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"cargo build\n")),(0,r.yg)("admonition",u({},{type:"note"}),(0,r.yg)("p",{parentName:"admonition"},"For the convenience of compilation, the cargo-related compilation commands are encapsulated into makeflie, and the locally referenced project files and online project files are backed up."),(0,r.yg)("p",{parentName:"admonition"},"Issue the following command to apply the local project files:"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"make local && make build\n"))),(0,r.yg)("h3",u({},{id:"run"}),"Run"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"cd ./xiu/target/release or ./xiu/target/debug\n./xiu -h\n")),(0,r.yg)("h2",u({},{id:"publish"}),"Publish"),(0,r.yg)("p",null,"When releasing a new version of the crate library, you need to update the version number. You can first edit the version number of the project file in the online folder, and then execute the following command to apply the latest project file:"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"make online \n")),(0,r.yg)("p",null,"Then publish according to the crates dependency order, for example: publish the xflv library first"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-shell"}),"cd ./github/xiu/library/container/flv\ncargo publish\n")))}w.isMDXComponent=!0}}]);